(ns phel-test\test\json\encode\value
  (:require phel\json)
  (:require phel\test :refer [deftest is]))

(deftest test-json-encode-nil
  (is (= "null" (json/encode nil))))

(deftest test-json-encode-true
  (is (= "true" (json/encode true))))

(deftest test-json-encode-false
  (is (= "false" (json/encode false))))

(deftest test-json-encode-integer
  (is (= "1" (json/encode 1))))

(deftest test-json-encode-float
  (is (= "\"3.14\"" (json/encode 3.14))))

(deftest test-json-encode-string
  (is (= "\"string\"" (json/encode "string"))))

(deftest test-json-encode-keyword
  (is (= "\"keyword\"" (json/encode :keyword))))

(deftest test-json-encode-symbol
  (is (= "\"symbol\"" (json/encode 'symbol))))

(deftest test-json-encode-list
  (is (=
       "[1,2,3]"
       (json/encode (list 1 2 3))))
  (is (=
       "[1,2,[1,2]]"
       (json/encode (list 1 2 (list 1 2)))))
  (is (=
       "[1,2,\"string\"]"
       (json/encode (list 1 2 "string"))))
  (is (=
       "[1,2,[1,2,3]]"
       (json/encode (list 1 2 (set 1 2 3)))))
  (is (=
       "[1,2,[1,2,[1,2]]]"
       (json/encode (list 1 2 (set 1 2 (set 1 2))))))
  (is (=
       "[1,2,{\"year\":2020,\"planet\":\"Earth\"}]"
       (json/encode (list 1 2 {:year 2020
                               "planet" "Earth"}))))
  (is (=
       "[1,2,{\"year\":2020,\"planet\":\"Earth\",\"list\":[\"multi\",\"ple\"]}]"
       (json/encode (list 1 2 {:year 2020
                               "planet" "Earth"
                               "list" (list "multi" "ple")})))))

(deftest test-json-encode-vector
  (is (= "[1,2,3]" (json/encode [1 2 3])))
  (is (= "[1,2,[1,2]]" (json/encode [1 2 [1 2]]))))

(deftest test-json-encode-set
  (is (= "[1,2,3]" (json/encode (set 1 2 3))))
  (is (= "[1,2,[1,2]]" (json/encode (set 1 2 (set 1 2))))))

(defstruct book [title pages year])

(deftest test-json-encode-hash-map
  (is (=
       "{\"key1\":\"value1\",\"key2\":\"value2\"}"
       (json/encode {"key1" "value1"
                     "key2" "value2"})))
  (is (=
       "{\"key1\":\"value1\",\"key2\":\"value2\",\"set\":[1,2]}"
       (json/encode {"key1" "value1"
                     "key2" "value2"
                     "set" (set 1 2)})))
  (is (=
       "{\"key1\":\"value1\",\"key2\":\"value2\",\"set\":[1,2,[3,4]]}"
       (json/encode {"key1" "value1"
                     "key2" "value2"
                     "set" (set 1 2 (set 3 4))})))
  (is (=
       "{\"key1\":\"value1\",\"key2\":\"value2\",\"set\":[1,2,[\"three\",4]]}"
       (json/encode {"key1" "value1"
                     "key2" "value2"
                     "set" (set 1 2 (set 'three 4))})))
  (is (=
       "{\"key1\":[\"value0\",\"value1\"],\"key2\":\"value2\"}"
       (json/encode {"key1" ["value0" :value1]
                     "key2" "value2"})))
  (is (=
       "{\"key1\":[\"value0\",\"value1\"],\"key2\":\"value2\",\"3.14\":\"Value of PI.\"}"
       (json/encode {"key1" ["value0" :value1]
                     "key2" "value2"
                     3.14 "Value of PI."})))
  (let [dictionary (book "Dictionary" 100 2020)]
    (is (=
         "{\"key1\":\"value1\",\"key2\":\"value2\",\"authored\":{\"title\":\"Dictionary\",\"pages\":100,\"year\":2020}}"
         (json/encode {"key1" "value1"
                       "key2" "value2"
                       :authored dictionary})))))

(defstruct person [first_name last_name age])

(deftest test-json-encode-struct
  (let [p (person "FirstName" "LastName" 30)]
    (is (=
         "{\"first_name\":\"FirstName\",\"last_name\":\"LastName\",\"age\":30}"
         (json/encode p)))))
